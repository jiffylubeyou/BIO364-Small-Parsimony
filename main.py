class Node(object):
    def __init__(self):
        self.child1 = None
        self.child2 = None
        self.data = None
        self.tag = None
        self.skA = 0
        self.skC = 0
        self.skG = 0
        self.skT = 0
        self.isRipe = False
        self.isLeaf = False

    def addchild(self, child):
        if self.child1 == None:
            self.child1 = child
        elif self.child2 == None:
            self.child2 = child
        else:
            print("Trying to add too many nodes")
        return

    def addData(self, data):
        self.data = data
        return

    def getData(self):
        return self.data

    def toString(self):
        print("###")
        if self.data != None:
            print(self.data)
        else:
            print("No data in this node")


# Run the input
def main(inputString):
    lines = inputString.splitlines()
    nodeTuples = []
    numLeaves = 0
    for i in range(len(lines)):
        if i == 0:
            numLeaves = int(lines[i])
            continue
        nodeTuples.append(lines[i].split("->"))

    nodeArray = []
    # This adds leaves to the nodeArray
    i = 1
    for element in nodeTuples:
        currNode = Node()
        if i <= numLeaves:
            currNode.addData(element[1])
            currNode.isLeaf = True
            nodeArray.append(currNode)
            i = i + 1
        else:
            break

    # This prints the nodeArray that should only have leaves
    # for i in range(len(nodeArray)):
    #   nodeArray[i].toString()

    # This adds parents to all of the leaves
    i = 0
    for element in nodeTuples:
        if i < numLeaves:
            if len(nodeArray) <= int(element[0]):
                currNode = Node()
                currNode.addchild(nodeArray[i])
                # nodeArray[i].toString()
                nodeArray.append(currNode)
            else:
                currNode = nodeArray[int(element[0])]
                currNode.addchild(nodeArray[i])
                # nodeArray[i].toString()
            i = i + 1
        else:
            break

    # adds parents to non-leaf nodes
    startLoop = i
    for i in range(startLoop, len(nodeTuples)):
        if len(nodeArray) <= int(nodeTuples[i][0]):
            currNode = Node()
            currNode.addchild(nodeArray[int(nodeTuples[i][1])])
            nodeArray.append(currNode)
        else:
            currNode = nodeArray[int(nodeTuples[i][0])]
            currNode.addchild(nodeArray[int(nodeTuples[i][1])])

    # Tree should be built at this point
    total = 0
    for k in range(len(nodeArray[0].getData())):
        for v in nodeArray:
            v.tag = 0
            if v.isLeaf == True:
                v.tag = 1
                if 'A' == v.data[k]:
                    v.skA = 0
                else:
                    v.skA = float("inf")
                if 'C' == v.data[k]:
                    v.skC = 0
                else:
                    v.skC = float("inf")
                if 'G' == v.data[k]:
                    v.skG = 0
                else:
                    v.skG = float("inf")
                if 'T' == v.data[k]:
                    v.skT = 0
                else:
                    v.skT = float("inf")
        # ripen nodes
        for node in nodeArray:
            if (node.child1 != None) and (node.child2 != None) and (node.tag == 0):
                if (node.child1.tag == 1) and (node.child2.tag == 1) and (node.tag == 0):
                    node.isRipe = True
        # loop through ripe nodes
        while (findRipeNode(nodeArray) != False):
            currNode = findRipeNode(nodeArray)
            currNode.tag = 1
            currNode.isRipe = False

            changeSKVascent(currNode, currNode.child1)
            changeSKVascent(currNode, currNode.child2)

            # ripen nodes again at the end of each loop
            for node in nodeArray:
                if (node.child1 != None) and (node.child2 != None) and (node.tag == 0):
                    if (node.child1.tag == 1) and (node.child2.tag == 1) and (node.tag == 0):
                        node.isRipe = True

        # At this point in time, all nodes should have the correct SKV so we take minimum of root
        root = nodeArray[-1]
        min = float("inf")
        chosenChar = 'X'
        if root.skA < min:
            min = root.skA
            chosenChar = 'A'
        if root.skC < min:
            min = root.skC
            chosenChar = 'C'
        if root.skG < min:
            min = root.skG
            chosenChar = 'G'
        if root.skT < min:
            min = root.skT
            chosenChar = 'T'
        if root.data == None:
            root.data = chosenChar
        else:
            root.data = root.data + chosenChar

        total = total + min
        # This function builds to the string data
        descentRecursor(root, chosenChar)

        # This one clears the node SKV data for the next k loop
        clearNodesKSV(nodeArray)
    print(str(total))
    printNodes(nodeArray)
    return total

def printNodes(nodeArray):
    for node in nodeArray:
        if node.child1 == None:
            continue
        print(node.data + "->" + node.child1.data + ":" + str(findHammingDistance(node.data, node.child1.data)))
        print(node.child1.data + "->" + node.data + ":" + str(findHammingDistance(node.data, node.child1.data)))
        print(node.data + "->" + node.child2.data + ":" + str(findHammingDistance(node.data, node.child2.data)))
        print(node.child2.data + "->" + node.data + ":" + str(findHammingDistance(node.data, node.child2.data)))

def findHammingDistance(string1, string2):
    distance = 0
    for i in range(len(string1)):
        if string1[i] != string2[i]:
            distance = distance + 1
    return distance


def findRipeNode(nodeArray):
    for node in nodeArray:
        if node.isRipe == True:
            return node
    return False


def changeSKVascent(parent, child):
    Amin = float("inf")
    # Loop for minimum possible A
    if child.skA < Amin:
        Amin = child.skA
    if child.skC + 1 < Amin:
        Amin = child.skC + 1
    if child.skG + 1 < Amin:
        Amin = child.skG + 1
    if child.skT + 1 < Amin:
        Amin = child.skT + 1
    parent.skA = parent.skA + Amin

    # Loop for C
    Cmin = float("inf")
    if child.skA + 1 < Cmin:
        Cmin = child.skA + 1
    if child.skC < Cmin:
        Cmin = child.skC
    if child.skG + 1 < Cmin:
        Cmin = child.skG + 1
    if child.skT + 1 < Cmin:
        Cmin = child.skT + 1
    parent.skC = parent.skC + Cmin

    # Loop for G
    Gmin = float("inf")
    if child.skA + 1 < Gmin:
        Gmin = child.skA + 1
    if child.skC + 1 < Gmin:
        Gmin = child.skC + 1
    if child.skG < Gmin:
        Gmin = child.skG
    if child.skT + 1 < Gmin:
        Gmin = child.skT + 1
    parent.skG = parent.skG + Gmin

    # Loop for T
    Tmin = float("inf")
    if child.skA + 1 < Tmin:
        Tmin = child.skA + 1
    if child.skC + 1 < Tmin:
        Tmin = child.skC + 1
    if child.skG + 1 < Tmin:
        Tmin = child.skG + 1
    if child.skT < Tmin:
        Tmin = child.skT
    parent.skT = parent.skT + Tmin
    return


def descentRecursor(node, chosenChar):
    child1 = node.child1
    child2 = node.child2
    # begin the child 1 work and start recursion if it has children
    tempChar = 'X'
    myMin = float("inf")
    if chosenChar == 'A':
        if child1.skA < myMin:
            myMin = child1.skA
            tempChar = 'A'
        if child1.skC + 1 < myMin:
            myMin = child1.skC + 1
            tempChar = 'C'
        if child1.skG + 1 < myMin:
            myMin = child1.skG + 1
            tempChar = 'G'
        if child1.skT + 1 < myMin:
            myMin = child1.skT + 1
            tempChar = 'T'

    if chosenChar == 'C':
        if child1.skA + 1 < myMin:
            myMin = child1.skA + 1
            tempChar = 'A'
        if child1.skC < myMin:
            myMin = child1.skC
            tempChar = 'C'
        if child1.skG + 1 < myMin:
            myMin = child1.skG + 1
            tempChar = 'G'
        if child1.skT + 1 < myMin:
            myMin = child1.skT + 1
            tempChar = 'T'

    if chosenChar == 'G':
        if child1.skA + 1 < myMin:
            myMin = child1.skA + 1
            tempChar = 'A'
        if child1.skC + 1 < myMin:
            myMin = child1.skC + 1
            tempChar = 'C'
        if child1.skG < myMin:
            myMin = child1.skG
            tempChar = 'G'
        if child1.skT + 1 < myMin:
            myMin = child1.skT + 1
            tempChar = 'T'

    if chosenChar == 'T':
        if child1.skA + 1 < myMin:
            myMin = child1.skA + 1
            tempChar = 'A'
        if child1.skC + 1 < myMin:
            myMin = child1.skC + 1
            tempChar = 'C'
        if child1.skG + 1 < myMin:
            myMin = child1.skG + 1
            tempChar = 'G'
        if child1.skT < myMin:
            myMin = child1.skT
            tempChar = 'T'

    if child1.isLeaf == False:
        if child1.data == None:
            child1.data = tempChar
        else:
            child1.data = child1.data + tempChar

    if child1.child1 != None:
        descentRecursor(child1, tempChar)

    # Here we start all the child 2 recursion
    tempChar = 'X'
    myMin = float("inf")
    if chosenChar == 'A':
        if child2.skA < myMin:
            myMin = child2.skA
            tempChar = 'A'
        if child2.skC + 1 < myMin:
            myMin = child2.skC + 1
            tempChar = 'C'
        if child2.skG + 1 < myMin:
            myMin = child2.skG + 1
            tempChar = 'G'
        if child2.skT + 1 < myMin:
            myMin = child2.skT + 1
            tempChar = 'T'

    if chosenChar == 'C':
        if child2.skA + 1 < myMin:
            myMin = child2.skA + 1
            tempChar = 'A'
        if child2.skC < myMin:
            myMin = child2.skC
            tempChar = 'C'
        if child2.skG + 1 < myMin:
            myMin = child2.skG + 1
            tempChar = 'G'
        if child2.skT + 1 < myMin:
            myMin = child2.skT + 1
            tempChar = 'T'

    if chosenChar == 'G':
        if child2.skA + 1 < myMin:
            myMin = child2.skA + 1
            tempChar = 'A'
        if child2.skC + 1 < myMin:
            myMin = child2.skC + 1
            tempChar = 'C'
        if child2.skG < myMin:
            myMin = child2.skG
            tempChar = 'G'
        if child2.skT + 1 < myMin:
            myMin = child2.skT + 1
            tempChar = 'T'

    if chosenChar == 'T':
        if child2.skA + 1 < myMin:
            myMin = child2.skA + 1
            tempChar = 'A'
        if child2.skC + 1 < myMin:
            myMin = child2.skC + 1
            tempChar = 'C'
        if child2.skG + 1 < myMin:
            myMin = child2.skG + 1
            tempChar = 'G'
        if child2.skT < myMin:
            myMin = child2.skT
            tempChar = 'T'

    if child2.isLeaf == False:
        if child2.data == None:
            child2.data = tempChar
        else:
            child2.data = child2.data + tempChar

    if child2.child2 != None:
        descentRecursor(child2, tempChar)
    return

def clearNodesKSV(nodeArray):
    for node in nodeArray:
        node.skA = 0
        node.skG = 0
        node.skC = 0
        node.skT = 0


# Stepik example
# main('''4
# 4->C
# 4->C
# 5->A
# 5->C
# 6->4
# 6->5''')


# Example inputs
main('''128
128->CTCTGGCACGGTACCTAATACCTGTTGAGACCTTCCGACAACTTGCGTACGGAAGTCGGATGGTTTACTAAGTAGAGATTCTTCAGCTCCCTGGAATCCGCAAGAAGTGTCTATACCGGCTCCTATGGCCTTGGTCTAGAGGCGAATAGTAG
128->TGACAGAGATGCTAGGGGTTGCCACTGGATGCTCGTTTGAGTATAGGTAGAGCACGGTTCAGCTTTTCGTAATGATGAGCCACAGGCAAAACAGTCAACCTTTGGAATTTGGAGCCAAAAGAACAACAACCATTAGGTGAAAGTCTGGGATT
129->GTGTACTGAGAATTACTTTATTCTAGTCGAGATCCTCGGTGAGTTATTCTAGGTAGGGGGGGTCTAATGTTTCTTCGCGTGGCATGAAATCCTACACCAATATCAATTCGTAATTCTGCCAGCGCATGCAGCGCTATAAGGGTCGTCAGTCG
129->CGTACCACACGCGATAGAGCCGTGGTATCACCTCGCGTATTGGACTGGTGTTACCCTGTAGGAGTTCGGAAGCACGGCATACCTGGTAAAATCTAGGCTACGAGCTGGGCGTGCGCGTTCCCAACGAGTGCGTGCACACAAGGCAACACTGT
130->GTCTTACTTCTAAGCATATTCGCCGTATGGGCACGCAATGATATCGAATCATAGTACGAAATTTCTGGGTATTCTCACTCCCACTAGACCGCGGCGAACGAATTGGAACACGAACCATGGGACCGCGTCCTCATAGCCATTTAGCGAGAGCC
130->CGCCGCGCATTTTTTTTATTTGAGCGACTCTTGGCCGATCTGTCAATCCTGCGCGATGACTCACTATATTTGCCGCCCGGAACTTTGGATCGATCTACTTCCGTTTGTGGAGTAAGCGAGCTCTATCGTTGTAAAAGAAATAAGGGACCGAG
131->CTCAGGTCGTTCATACGGCGGAGTCTAATGCCCGATCTTTTACACGAGGTTGTTGAGTGTAATCACATTAGTAATTGAATTCGTTGAGACGGCGTCCAAAGTCTACTACGCGGTACCCCCAGCCAACCGGGATGCTATCAATAGCGACGCCG
131->TCAGGACAGAATATGGGACAGGTGTCGGGGGGCAAGGCTGGCCCCCGCATAATTGCTGCACCGCCAGCGGAATAGATAATCCCTAGCCCACGATTCGGGTACCAGCGGTTTAATTCAGCCCTCAGTTGCGATGTGGTCGTCCTTACTATTGT
132->GCGTCTCACCTTATTAACATGCAACTGGAGTTTGCATATTATTTCTTACCCTGACTTGGTGCTTAGACCGTGTGTGCCCAAGCGGTTCGCCGCAGTGCGACTTACTTTGACACCATGTCAGTAGGGATGTACTCACGAGGAGCATGATTCTC
132->GAAATACCTTCTTGGTTTGTCAGCTCCCCTATGCCAGCCCTCATGATTAGGAAGGTGCACGGGGTTTCCCTAACCCCTTGGAACCTTGCTCGAGAACGGCCTGATGGGTCAATGCGCTCTTAAGCCACCGCTCGACAACGTTAGTTAACGCG
133->TCGAGCTGTTAGATGTTACTTTCTCAGCGGAATACGGCCGCATGTTGTACCGGTCGTTAAATAAGAGAAGTCCTCGAGTCTTGACGTCAAGATTCTTAGACGCGGCACAGCCTTCTACCAATCATAAGCCTACATCTCTCCAAATCTGCAGT
133->AAGGCTTGACTTCACGGGTAGTTCGACAATCTAACCTTGGGGCACAGTTGCAGCGATGTAGCCGCTCCATGTTCCCGACCATGCATCCAAGAGGGGTTGATGCAGCAATCCGTTCTAGCGGAAGGGCTCAGGTGGACCGCCACCTCTCGGCC
134->TCACAGGCTATCCATATGAGGCTGGACATGCTCTCCCCGTACCGGACTAGTAGAATGACCCGATGAGCGATCGGGAGGATTTTAGACGAGTCTGCAAAGGACCGTAAATCGAGGAAATTCTCCACTGCTGTTCCGGCGACTGACGTAGAGTG
134->TTCTGTTACCGGTCTCCAGCCTCACCCTGGCCCATAGTTCATCTGAAAAGTGTTACACAAAGGTGACGAACGATCGCTGCGCACTCAGGGAGTTGCCGCCTGATCGTGGTTACCCCACCACTAAGATTTACGGAAACCGTAGAGCACGCATT
135->GCAGTCGTAAGCGATATCCCAAGGCTCTGTTCCCCCTCACTTCGCCTCAAAACGACTCTCAAGGGTGAATCATCCAAGGCGCTTCCGGTCAAGCACGTCATTATCGGGGCTGTCTCCGCGGAATATATCTATAAACGCCAAGTTGGCCTTCA
135->GCTACATTGCCCAATAGCTGCCGCAGACGGAGCAGAAATTACGATTGTGACACTGGCTCGGCTGGAACGTGCATCAAAGAAGAGATAAGTTACTAAAGCTGAATGAACTACGGTACGTGATCTGGTTAAGCTTTATTGTGCAAGTGCATCAT
136->TTCGGCTAGGGATCAAATTATAACGACTGAAGGAGCCCCTTTTCTTGCGCTCGACCACCAGTGCGCGGTTTGGCGACACTCGTGTCAATAATGAATACGTACCGACCCTTCTAGATTTCGGTCGTTCAACCTCAAGTCGCAGACTTTGCCAC
136->AGCCCTTTCGAGGAGAACGACGCCGATCACTACAGGAACATCACTTCAGTGTCCGGTTTCCGTGCTTCCTTTGACAGCCGGCCGTAACCCTCTTTCTGGAGGGATTCGTCCCATCGTTAGCCATGATATTCATACTGTGGAGGCCACTTTGC
137->GCGATATCTGATCATTCCTAGTGCCAATCGGGGGCGACTACGATTGGAAGCCCCACTTAGACATGTGCGATCCCACGGACTTACACCAACAAAACTTAAGGGATCTTGGCACATGAGGTCGTCGATTACTCGGAGCTCGTGGTATCTGAGTA
137->TGATTTCTTCACCGACACTCTGGTTCATCAACAGGTATTTGCAGCACTTATGTCTGAGAAGGGAGAGGGCTGATAAGAGTCAGACGAAGGCGTTTAATATTCGAGACTAGGATTTAGGGACCAGGATTAACGCTTGATCACAGAACTAATGC
138->GTCGCAATCTACGAGCTGCCAAAAAGTTAAATCAAGCCCACTCTTGAATGCTATCGGTTTTATTGGAACATTTCACTAACTCGGGTACGTTCATAGATCAGAGCGGCTACCGCCCGCTTGCTCTACTCTCAGCCTACAATCGACTGAGTGAA
138->AGACTTCGAGTGCTCGATGCGACTGAGACGAGTGCCCTAGTTACGAGGATCTGAGATCATTCATCTCGCAACCCGGCTCAACGTCTCTCTAGTGCCATACTTCGGCCTATACAGCTCCCGGACTCAGCTGAGTATTGTTCACGGAAGTTTTC
139->TAACAATCTCGTGTTAGTACGTCCAGCTGACTCTACGAAGAGAAAGGCTACCCTACGTGTAAAGCAATATTTCGTAACGACTGGAAGGGCAGTAGGAACGACACTTGTTATGTTAGGGATGACACATAGGGGAGCGTTTGCTTTTTTTCAAC
139->CCCTTGCTCCGCTACCTCAATTGACTGAGGCCAAGTATTCGGTTGTCGAATGAGAGCCAGTCTGGGATGCAGGAAAACCGTTAGGTTGTATTGTGCTGCGCGTAGGGAAATACAGTCCCCTTTTGGCATGATACGACTTGTCCGCTGGGCGT
140->TCGTCTATCCATGGTTTTGGGCGTGTTCGCCCTTCCTCAATAGTACGCATAGCGACTCGCCCAACTAGTGTTCGTGGGTATGCACAAAGAAATATTGCTCTCCAACTGAGATAGATCCCTGAGCCTCGGCGCCTTGTCTCGGCATTTTTGCG
140->AGGTAGGACCCGGCAGGTCAGGGCTCAATTCTGAGGTCATACCTACGTTCAATAGCGCTCCACCAAACCGGGGTAGCACCATCAGAATTGGATCAGCGGCCAAGTAGTTTTTTTTTAAGATCTTGTCAACACGACGCATCAATCAACAAGAT
141->GGTGAGACCCAATTATCGCGTCGCCACAGTACGGCAGAACAGCTGCGCATTTGACCGCATTAATGCCGCCGTCGGAATGTACGATAACCCCAGCAGGGTATTTTAAACGCGGAGGTGTTAGTAGAGGGTGACTAGAGACAAACAGGGGCACA
141->TTGTTGGTGGATCGGGCGGGCGCCCACTAACGGTGATCCTTAAGTTGTCGCGGACATGAGATCCTGCGGGATAAGGTTCGGGCATGAAAGGATCTTCTAGATGTGAACTGCTTGTGTGTTGCCCGCCTGGAGGTCGTCAGCGGTACTAGTGG
142->AGCGCTATGGCGCCAATGGAGTACTTAGTTCCTACGCAAGTGCCTTGACGCTCCGTATTTATCCTCCAACCCTCCTTTAAAACCGATAAATCGGCGAGGCTCGGGGTTTTCTTGACATACACGCCTACTGAACAATAGATCGATTGGAGGGA
142->AACTTGAATCAGGTATACGCCGCACACTATTTGTATCCTACAAAGTACTGAAGCGTACTTAGAAAAGGCTAGTAGACGTGCCCCCATGAGCTCTTGTATAATAGGCGCTAGGGGCATTAAGAAGCGTGTTCGGAAAGTCTTATTCCTAAGAT
143->TAGGCTAGGGGGGACCTGTGGTCCATGCCTAATACATGGAGTACTAGGCAAGGGGCAGGTAAAAGCGAAAGTCCCTCATAGGGCCAGCTAAGAGTGGACCTGAGAAATCGACAGTGACACTATCTTAGCTTATCAGTTTGGGCAGATTTTCA
143->TATCTTTCTTACGGGCTCTAAGAAGGACAACCATTCTCTTATGAAGGTGTCAATAAAATCATCCATCGTGGGACGTTAACTGTGGTTTGGTCGGGGGACGCCATCATTGGACGCAGTCTTAGTTAGTTCATCCATAGGAGTGGTAACGGGGG
144->TTCCAGATCTAGGTACACTAGTACATATTGTTGCTCCTGCGATATATCAACAGTCATCTGAGGGCGTAACCGCTCGTTAACGAGTAGCCCATGACTTGTATGGGCAATGGGTTTAGATCCCGCGCAATAATACCTATTGTAAGCGCGCCTTT
144->AAGCTGACTATGCTGCATACAGATCGGTAAGCATCCGCGTCCAAGCGAGAAAGATAACGGGGCCTTGCCAACCTATGAATTATAGAATAACGTAACACGATAAATGATAGTGCCCGTCCATATGTAGTTTTTTAGGACGGTGATGCACTCAA
145->GATTTACGGCTGGGTTAGTCCAGATGGTCTCGTCAGCGTTAACTGGGACAGGGCTCGTGACCTGTCTACGTACTCGGTAGATGCTACTGGATTATTGCCTGACAAATTAGCTATTAGGGTATACCTAGTGAGGTTGCACGACACTACGCAGG
145->TCTTAGACCCAGAGATGGTACGACGTCTTAGCATCCAGATGTGCATGGTATTGGTGATGGCGGACGAAACTGACTTTGGGGTTCCTTTACGCTCCAGTTCGCATCAATGTGTTCGGCACCGGCTAGCTACCGCGCTTCTCTGGAGTAACCTA
146->CCGCAGCGCTAATGATCGGTCAGCCAAGTCGCTTTGGGGCTCCTGGTATTGGAGAACAACCTTAATGCGTCTGACATTCAGTACATCTAGTGCCAAAGTGGCTTGCTCGACAGGCGCTCCGAACAACGCGGGTCGAACCTTACCGTGCAATA
146->TGTTTTATACCAGGAATCCACGCCAGTTGACCACCGAACATTTTCTAAAGCACGTTCGAGCGGGCTCTCGGTCAGTAAGTTGGTCAGCCACCTTTATAATTGTCGTTCCGCTCAATTACTCGGCACGGAACAAAACAGTTTAAACGACTCTG
147->GAACGCTGGTAGTTGTGGTATCTTGAGCATCGCTGAGCGAAGTTGCTACCAATTTTCCATTGCACTCGCTAATGGTCAGGTTTACCGGTAGCACTCAAGTTTGTAAGCCGCCTCTGCCTAGCGGGAAGACCAAGAATTAAGGCGAAAGGCAA
147->GCCTCAGCGCTCCAAATCCAGTGTGGGTCAGTTGCACCGGAGGTAACCCGCCTCCATTCGATTCCTGTTTCCTAGCGCATGACGCTGCATTCGGGACAAAACGCGGGGGTCGCCTAAAATGGTCATATCTTCCCTTGTAGCGGGTGTCCTCT
148->CACCATGCCCAACCTAGATCTGTGCGCGTAAAGAGGAAAAACTGGGGCTGGGCCTGCTGTTTACCTGGTCGCATACCATCGTCGATCATCTGACACGCCCCCTAGCTCATCAAGTGCGCAGGCAGGGACTTAGGAGGCATCAAACTGTTCTA
148->ATATAGCTCGCTATTAAGACTCGCGATGGAGTCTGGGGGCGTCGGGTCGTGGGTAACTGATCAGAGAATCCGACAGATCCCCCCCTGAGACTTGAGTCGCCCAGGAGTTAACAGAGTCTCTTCGGCCAAAGTTGCGGAATATCGGTGGTCTC
149->ATCGGGACCGATTGCTTATTAGCCATGATTGTGTCTCGAGGTATTATCATCGGGATAGACCTGTCAACTTCGCACACGAGTGCGAATAAGCCAAACCACTTAAGCCGTGCGCGGTCACAGATGTGGGCGACTCATAATTTGCATCTACTGGG
149->TACGCATCCTAGAGTTTGAATATAACTCCCGGTACGAGGCACCAAGCTTTGTAGATTTTAAGAAACACCCATTCTGACAATTAGATCGCAAACACAAGTAAGGCAGGAGGCCAGAGGATTGTAGCTGGAGAGTATGTAAAGGGCTCGCATAG
150->GTCGACTTTTTAGGTGCCTTAGACCACGACGGTGACTTTGCAAGCGTTAACTCAGGTTTCACCACGGTAAATCGGCCGATCTTAGTGTGGAGTTGTGACGCGATAAATCGCTCGGAGCTAGTGGAGTATTTTTGCACGGAGCTTCCATTAAC
150->CACGAGTTCGTCCCTCCGCAGCGGCGAGCTCAAGTTGCAGCTTGATGGCAAGCTGATCAACATTATATCGGATAAGCAAGAGAATGTTAACGTCTGGTTCACGGGAATAAAGCTATTGATTTAGCAGGAAGAGTTTGGGCGTAGAAGTAGAG
151->TGGGAAATCATCGAAAAGCTCGGCGTCTAAAGATATCTCCAAAGAGAGCCTTAGCATACGACGTTGAGTTATTAACTTACCCCTAGTCCTGTGACACCAGGGGGATCGGTGGCTACATGTTTCGTACGTAGCGAACTTATCAGACTATCACT
151->TGGCCCTTTGAACTCCGGCCTACTTCAAGCAGATTCTACGGTCCACATACATGACTTAGTCATACGAGCCCGACTTGGGCCGGGATTTGGAATGTGCGTCCGGAAACCTACGTGAGGAACGAACGCAGGGGAACGTGTATTAAGGTGATAGG
152->ATAAAGCTAGGGCCTAGACGGGTAGCAAGACCGTATGGAGCGCGTCGTACGCCGGGCGCCATCGTCCGCCGGGCAGCAGAGCCCCGCCCTCTATGCTGGAGACTTGGCAAGCCGGGCCAGGCGTTACCGATTGTAAAATATCTGTTCCTCAG
152->GGGGCTCTGCCCAGCTACTCTGATGCTCGCTCAGCATGCTTCTTCCTTAAGTCCCTTGCTCGTCCAGCCGAATACAATAGTTGGATGGATACGGGAAGGTGCCATGGCGAATACAATATGATATCACGCAACCCATAGGAGCTCGATTAAAT
153->GCCGCGAACAAAGCGTGATGTTGGTATGGTCGCGATCTGATGTGAGTAGCCGCTTGATACAGCCGTGCGCTGAACTCGGTAAATAACCCATTCCACCTGAGTGTGCAACGTCTCTCGACATCCGTGTGTTCTACGAGGTAGATAATCCAACT
153->GATTATCTCTGTTTGCAGCTTCACAAAGAAAGCTTCGTCAAGGCATGGTAGCGAGCTGGCATTACTGTTTGCCGAAACGTGTAGTAGTAACGCAAATCGCCGTGATTCTGCCGCCCCTCCCACCCAGATTGGCCGTTGGCCAGTTCTGACGG
154->CGGGTGGTGTGTCAGTGTATATGAAGCGCTTAAGTTTCAAAGCCCAATCGCGCGACTCACAGCAAGTGGTGTGTCGACTCGTCCACTTGATCTAAACCCATGCCGCGGTCGTTAAGAGCGGGAGCGTCATGGTGGGGTCGGGAGCTGAAGAT
154->GTCTAGTACCAGGCGGGCGGGGAGGTAACGTTCCCCAGATGCCTGTGACCGCGAAGATGTCTACCAACTGCAAAGATAGGGAGATCTTATGGAATGAGCGCCAGCGTAGTCTACTCGCCGTTGGGACTAAGTAGCTGTTGCGATGGCACTAC
155->GAGGTCAGAGCCCTACACCTTGACATTATGCGTAGCTTCATCCGCACTTGAGTCCGATTTGGTAGCCTTCTCCTCCAGGATTAGCTGAGTTTTCATCGGACATATGATCTGAGCGATCGTAGGGTTGCAACCCGATGCAGGTCCGAATTTTT
155->CGCCGCAGGGTAGAAGTGACTACGCATAAGGTGAGGGGGCTTCCGCTTCTTCAAGACTAGTGCCATTGTTGTGCCTTGCCGGATGGGTTAACAATCGGTCGGATCGAGGTTGCCGGATGAGACAAAGTGATCCGACCTCCCAATGGGTCGCT
156->GCATACCGCTATGGTAGCTGATCACCCGTCCCTCGGCCAGCATAGACAATTAACGTAACGTCGTTACAGAATCAAAACTTGACCCTGGTAAGCCCCGCGGGGGGCTTAATAGAGTTTGTTTTGTGTTAACTTCTAGACAGTCCGACAACGAT
156->TGTACGTCGCAAACCACGTATGTATGCCGGAGCGGAAGAGCCCCGCTAATCTCCTTTAAATTAGCTGGAAGCTTACTCAGCTGTGCCATGTTATTAGTGTGTTCCTTTTGTCTAACGCCCCCGAGTCCAGCCAGCGAGTGCCGCGTTCGTAG
157->AAACGCCATATCCGCAGCTTGCTCATTTTACACAACGCATGCCAGCACCACCTTAGGCGCGGGTAAGTCGACGAGGTAAAGAATCCGGCATAATTCTCTTAAACCTGCCTATGGATCATTGCAGACCTGGTCCCCATGGCGATTTACCTCAC
157->AGAATCCGCTGTTACTTGGCAGTTAATTGCCGGCGAGTTCGCACATTAGCGTTAGGTGCATGTAAGGGGGTTATCCTATAATGCATGTACTGAACCGTTTGGCTAACCATTGCAGGCATTCTAATCATTTTGAACTGTAAGCGGAAATAAAT
158->AACCGGCGAATCATGCCGCATATTGTGAGTGACTTAAATGTCCCAAATGCACCAGCAGTACGCTAAAAATTGTTGAGATTACTACAGTTCCCTAAGCTAGCCCCCGCTTTACAGTGAGCCAGTGACCACTGCCTACCGCCAAGGTAGCAATC
158->AGACGCTGACGACGACTGCGCCTGGTGTGCTGCTAATGCCCCGCTGAGAACAGCCCCGAGACGCATGAGTGTAATCTTATACTGCGAGGAATTTGGGTTGTGTGGATCTGGGCCCAGCCAACAAGATTCCTGCGTTGGTGGTGGACTAACTG
159->TGTGCTCCCTCGCAGGTTTATTAGAAATATAGACCAGTTTTCCCGATTGATCAGCTCCGCATGTGGTTTTGTGATATATAAGTTAGTCATGAGAAGGGCTCTTGGAGTTTTTAACTGTGGCTTGGTCGAACGTTGCAGGGTCAAATGACCAG
159->TAGCCTTAACACAAGAGCGAGAACTCCAGTTTAGATCGCACTAAAGAGTCATTAGTCATGTGAGTGCCCCTAAGCCGGGTCACAGTTAGTATCACTTCATAGATTACATGATTGACGATAGACCTCTCACTTTGGTCAGAAACAAATACAAT
160->ATCTAGGATTTGTCTGTCTCGCTCCGCAAGGCTTTGCAATTCACGCCCCAGGCCGCTTCTGTCTATAACGCTTCAACGTGGCGTCCCTCGCACTAAGAAATTGGTGATACGGTGGCTACGTGGTGGGCATGTCTAAAGCGAGACCCATCCCG
160->GACTGACGGGTGCCGGGCTTCAGGCTCCACCACACTCTCTCGTCCTTGCACGTCTCGGAGAATGACCCGCGGAAGGACATTCGCTATATCCAGCGTCGGAACATTATAAAAGTCGAATGCCGCTCGAACAGGGTACACTGTAGGAAGCTATG
161->TTTTTGGTTTTTGACGGCGTCCGACGTCGTTCCAGAACTGACCAACCCATTAAATTGGTTTCATACCTGCGGGAATATGATCGAGGATCTTTCAACGTTTAGTTTCATTGCGACTGCAAGTCTGCTGGGCGCCTTAGGCATAGCATAGTAAT
161->CGTCATCGCCATACGATCCGACCCGTTCAGGTAGATACGTTCTGTGGGAGTTAGTTAAGGTACAATAGTCTCGCTCCTCATATCTCTTAATCCCATTGCTCGACCACTTTGTCCCTAAAAGCAGATATAATTGGAGGGAACTCACAGTCGTT
162->ATCGATGGTTCTTTACGCCAAACGGAGCTTTTGATCTTTGTAACAAAAAATAGATGTCCCAATTCTAGGCCGAAGACGAAGAAGAATGTCAATACCGGAAGTTTGCATAAAGTAGATTCCTGGCTTTAGGATTAGGTAGGCGTGCGGCGTAG
162->GTTTGCCACGTTCCAAGTTGGCGAATATGGCACAACGAATGGCAAGCTACCGTTGAAAGAATGTACGCCGGGTTCCGCTGTGGAACGTATGTCTGCGTACTTGATGGTAAACCCAGGTATTACACAGGACCCCCTATCTGATTGCACATTCC
163->CTGGTCGATAGGTTGGCCACGAAACATACCTCTAGGGGCATGAGTTCTTTTATATTATAACGGGTCGGCCACTCCTGAGCGCGAGGTGACGTCGCCGGAACGCTAATTCCTACTGCACATTTCCCGTTTACATTTAACGGTGTCTCACCTTG
163->ATGTCAAGGGGCAAACTTGAAGTAGCGTATTTTATCCATCGGTCTGTTCAGGACAACACCACAGGGGAGTACCTGCATGCGATACAGATCCGATCGCTGGGTGTGCCAAGCTACCATAGGAACCTGGCGATAGCCTAACGCGGCATGAACGC
164->AGGTATTAAAGACATGTACTAGCGCACTTTTGATCCATGACCGGATGCCGTTAGCGTCCCACACAAGTGAGGTGTATGCCGCCTCAAGGAAATCGTGCTACTGAAACGCAGCTAAAGGCGGTAATCACGCTTCGCCCCGAGCACCACGTGGA
164->TGGGCCGCCACTAGGTACGGTCTCACGGTTGTACTAGTTCCGCCTGATTGTCGACCTCGAATATTGGGAAATACACCATCTTCGTTAGTCTTTTCACCCAATTGGCAGACTCCCCCCCTCTACACGCAGGCGGCTAGTCACATTCCCTAGTT
165->TTATGCATGACTTAAAGTCAGATCTGATCCTCTTTAGGATGGGGGCCTCTACGTTGCTTGTTGTTTCAGTATCTCAATTGCCGTTCTCCTCTGCAGTGTATGTGGGTATGAAAGTGTTGCGATCTCTAAATACGCAAGTCCTACTTGAGCCC
165->CGACTCCACTGAGACAAATCACTATATATCCCCACTTCGTACCCGTGGGCACGGAACGCTTCTTCCTACTACCCGATAAGTTCCCTTCTCAAAATCTTTCCATGCTCGGCGCGTCTTCATTCGGGGGTTCAGCTTCTTTGCAGGTCAAGCGC
166->AGTGGTATAGACATAGGCGCAATTGATCGCTACCTGTACCACTTACCGCCAGTAGACCGAAGACCTATATAGCTAGCCCTGGAGAATTGCAATCTGTATACAATATACATGATTCTATCACGTGTGGCATGCTATTAATATGGCCTGATCCC
166->ATCTACATGATCTTAGCATGTGGTCAGGTGTCCATGCTCACCCCCAGGTTCCATGGACCCCCTCCAGATAACTGGCAGGGCCAACGGCCATTGGAGACTGCACAGTGCCGGGCTTTACATTCGCCGGTCTCGCTTTTGAGCCAATTCCGATG
167->GAACGACGTAAGGCTCTCCCTTACGTAACTTAAGTGGCGACCAGTACGTTCCTCTCCCCGTCCAAGGGGAAGGGTCCAACATCTAGGAAGTAGGAAGTATCCAAGACGAGCCAAAATGAAGACGAATGCTTTAGTCGTGTCTATCCTCCACC
167->AATTTAACTTCATACCCAGTCGCTGTACCCTTGGTAGTAATGTTCCTCCTGAACTCGTTGCCGCTTTGGGACACCTCAGATCGAGTCCATATCAATGCTGTCAGTCACCGTACCCGGTTGGAACACTTGTTGTTCGTTAAACCTCCTAGTTA
168->ACGCTTCTATGAGCACGAACAAACCTGCTCCAGAGACAAAGTGGGAGAAGGCATGTTGCGGACGATGGTAGCGGTTGACCCTAGCGAATAAGATACAGTGGGGTGACATATCTCTATTCTTAATTGAGTGGCACGAGCACGGACGCGTCGCA
168->TGAGACGGGAGCATTCTGATGTAATAAGAGTTAGGAAAGATAAAAGTTCTGCTTTTGTCGTCCCCACGAGGCACAACGTGACTCTGGCCTCATGATGTGATACGCAATACATGCGGCTCGGACAACGCTGTCTTCCCATGGTTGCTTACGAG
169->TTACAGACTACCAGTTAGCTGGGGATCCAGGTGTGATGTGTAATTTGTTTGGGGCCTTCTTTTTTCTCGGGAAAAACAGTTCCTATGCCGTACGGCACGCCGCGCAATACGTGAGGAAAGTCCTGCCGGGAACCTAACTAGAAAACTATGCG
169->GCCCTCGGGGTCAAGTACACTGGTGAGGGTAAAGGCCCGAGCAGAAACTTTGGTGACGACCTGCCGACGGCCACGCTGAACCCTAGTCACCTGAAGTAGAGGCTTATTGGGTTAGACAGCATAATATAAAAACCCATGTCGAAGGGGGTGCA
170->CCTGCCCGCCGGTAGCATCCGTGCTGAATTCCTGAGGTGTACATCTCCATCAGCGCGGGACATACCAGCAGCTGTTATATACCAGATGCGTAGCGGAGTCAATGCTGTCGGCGAGCTTTATGGAGTGTAATGAACCCTGAGCCAGGGACCGC
170->ACGCAACCTTTTAGTGAGCAGATGTTCTTAGGATCCCCCACCCATAGGCAAGTCGGTGCTTCATGCGTTCCGACACTCTATGGGGCTGGCGTTTGTTTTCTCCAAAATTAACACTACAGCATCAGTCATCAAAACGGCAGACGCCGTCAGGG
171->GACCCGCCTACTCCCCTTCACCTCAACAACACCAGTTTGGGCCGCGCCACAGGCCAGCATAGATGATCGAAAAATGACGGATGCTTTGATAGCCCGTGTGTTCTTAAAAATGTAGATATCGCTAAGCAAGTTTCTGATATAAGTTCCTCTGT
171->GCGTTGCGATGGGCCGATGTCAGTATTTTGCAGAGCGCCGTATTAGAAGTTGTGTCCTCTTAAGTGTTTGTTCAGGTCTCTCGGTGTGTTAGGCACTCCAGGGATAGTCGACGCCGACTTATCCGACGTCCGGGGTACGTCTCGCGATCGGG
172->CGGGGGTCCCATATACCGTCACTTCTGCCTCCAGCAACGGGACTGAAGAACCCGCCCCCTTTTCTGATTGAATGTGGATGCTGGTCTACGTGTTATGTCCGCCGTAGTTCTTTTTGTCGGATGAATAGGAGGTCATATGCGACATTGCACCA
172->ATTTCCCTCTGAAAGCAAGTGGAGTCGTAGCGTTACCCGTCTGGTACTATTGTGGCCTTCTGAAAAGCGGACAACCTCTGTCATGGGCTTGTACTGAGTATTTTCTGCCGCAGTATCGTTATGCTACAGTAGCCGGCCGTAGCGGGCCGACT
173->TAGCCTCTCAGGCTGGCAGTTAACCACCGCATGCTTGTATGGTTACTCTCTTTGTCCGGCTCCCCCCAGTGGTAAGGCTGTCTTTCAGCCGCGAATGCATCCCCACCCAGCGAGACAGGCATCGGAACCGAGGTCCCTTTCATTGTAGTCTC
173->CACAAACTTGCCATCGACCATAAGTTACTGTAAGGTCGCGCCCATGTGGCGGCGATTATCCAACCCCTCACCCGAATCATGGTTCCATTCAAGAGTATATTACGCACGTTGCCAGAAGTAAAAATATTCACTTTTATTCGGAGCCCTTAATG
174->CACACGCCGCTCCCGGACGATATACAGCACGTAGTCACATAGGGCATTACAGCAAGCTACGGTTCGTTCTAATTTGACATGTGCTCCTTCTATTATGTCGGCGACCAGGGGTGAATGCTAACCCCGGATGACATTATTGTTTGTGGCATGTA
174->ATTCAACTGCGTGTATCGCCCTGTGATCATATTCTCCCGGCCTTCCGGATGCCGATGCACTCCCGAATTGGACATCACATTGCACGGGCCGAGGAGTAGAGGGTGTGCTGATCAGCCAGAACATAGTTTTGTGTAAGGATTGACTTGCGGGA
175->TACTGGAAATCTTGGACTCCTCTAGCTTACCCCGCGAGGCCGACATTGAAGATCCATCTAGGTGCGGCGACATTTTACCGCACGGGACTATACGTAGCTAAAAATCGGTAGCAGACGCAAGATCCTGACGGGTATAACGTCTCGTAGGACTA
175->GAGAGGAACCACCTCCCACCGTACTTTAGACCTCAGAGGACCTATCGGAAGGTGCAAGAGGCAAACAAAAGTCTGTCCGGGGAGTGATAGGCTGATAGAAGGAGACGATCCTGATAGTGCACTGGGGTTAGACAGTGCGATCAGAATGGGCC
176->GCCGCAAATTCTAGGCGAGCCTTCCGTGTAGCAGTCTGAGTCAACAGAGTAAACAGAGGGCTGAGAGCAACTCCCAATGAGTGATGGGACTCGTCTGACAGTTTTTTCAGGGAATGGCCAGTAAAGTAGCTAGACAGCGTGTTGGCCGTTGA
176->CCATCGCGGGGTGCCACTTAGAGAGCCCCATCCGTAATCGGGCGAGTAATAATTTACGTGACCGCATGATCGACCTGATACCAGGGCTGCCCGAGCAAACATGCGATACAAAGGGCAAAACTGGTCGTCTATCCACTACAAGGTACAACTTA
177->GCTTAACATGCAGGGCCTGGCGGTTCAGCGGACAATGCTTCGCTTAAACAGATGGTGTATCGATGTTACGCCATTACGACAGTCGCGGCCGGACGTATTTTGTAGTGTTACTTTCTGCCGTCCACGTTGACTTCCTTGAAGAGTACAAGGGC
177->GATGACGAGGCCGAATATGAGGGCGCGGACGGCAGATTCAATATCTAGATTCGAAGGCTTAAGCCATTAAGCGGCCTAAATCGCACCGCGTAAAAGGTTCTCTAAATACCATTTTTCTCGTAAACGCTTGATACAACCTAGCGATTAATGAT
178->ATGCGCATGAACTTTACTGCCAATTCACACCCGTGGCGGGATGAGATGGAGAATGGCACAACGTAATCAAAGTGCCACCGGTTCCGACCCGGGAAAAAATCACAGCCGCTACACAGTCGCATGCCCATCGACCCGATGGTACTAATTAGTAA
178->TCCAGAAGCAGTCGTCCTTGTGTGGGACTGCCGCTTCGTGATGCCTCGTAGAGGATCGATTCCAAGCAACAAAAAGCGGTTTTAGCAAAAAATGTCATCTCTTAAATAAGCCAAGGGAGCTGTCGCTACATCTGTCTTCTCCGGTAAGTGGA
179->TCTGAGTCGTGACGTAGAGAGAGAGCTGTGGTTGGTGTCTTGGTCGCGTTCTGCGTTCCGAGTCGCAAGTAACGCCTGATAATTAGCATCGGCCCACATGATCAGAAGCACTCGTGACCCGAATTCAGATTGCGCAGACTAGGCCGGATTAC
179->CCGTGAGCGCAGCTGCCTTTTTGATTACGGCATCCTCAAACAGCGCAAACTGAAAGGCGTTATTTATACCCCATCGTTGAGTATCGGGTGCGAACACAGGACGAGTAAGTTCTTTGTCCGGCCTGTCGGCTTTAAGATCGTATCTCAGCGAA
180->TTTGCTAACCCTAAGTATCTCCGAACTTACCCCACGTCATTGTCTTGCCTCCAATCAATGAGTGACACGGTCACATTGGGCGTTGTGGCGAAGGGTAAATTTGCCTGCTCACCGAGGGAAGAAACCAGCAACAGAGGAAGGTCAGGTCGCGG
180->GCATTCAGGTCGCTCGCGTGTGGGGGATTATTTAAAGATTCGTAACTGTCTAGCCGCCTCATTTTCAGTCCTTTGCACATGGGACATTGCAGGGCGCCTTCGTACGGCAAAAGTAAATGGTGCTGACCAATGCGGCACACTCCTCACCGGAC
181->CAGAAACGCCCCTCGCTGCTCGGTATAAATTCGTACGAATGCATCTAAGTTTATGTACAAGGCCATCGCAACACGTACGTCAATCTGAGCCCCGAGGCCGCGACGGCATTGAGGAGCGTATAGGGCTTAGTAATTGGTGTGCCGGGTACTAA
181->TCACTAAGTGGTCGCGCATGAAGTGATCGCACGTAAGTAGACTTAGAGATCCTGGGTCGGGAGGCCGGCGGGATCCAACGCTTATCTAACTCGATCGTTAATGCTTCTACCACGGAAGTCCCCAAGGCCTCTATTCGAGGTAAGTAATACAG
182->TAAATTGCGATGTTAGCGTGTAGCGCTGGTGGGTTGTTATGGAGAGACAAACAAGCTTTAGCGCTTCCGCGCCCTTTCGTGGCCTCTTACCGAACCTGCCATTGCACGTAAATGCCTCCAAGCGTAACTTATCATACAAACATTCGAAGAAA
182->CAGTTTTCAAGGCATACGGACTCTCTATTTTCGATTTTCATAGTAACGGTCTGAATAGTTTGTGCAATGTCTTGCCACGGTAGTCAACCACCGCCATTGAGAGCTGAGGGACTCTGGCGCTGGGCTGATACGTGGCAGGCTCGCGGGATTTG
183->ATAATTTTCTAGTATCTACTCGGCGAGTGGGATGCTTAAGCGGTGCGTACTTTCAACAGGAGCCGCATCATTAGCAACATTACTCGATTCTAGTGAAGGTAATGTGCACGAAGGCAAGTTAGCGCCCTGAAGTCCATCAATGTCACAAGACG
183->CGTGACCTAACAATGGTATGGGATGCATTATAGCGCGATCCCGTCTAGGCACGTCCGCTCTCAGATCAAAGGTTAGTAGTGCTGCAGTCAATATCCCTCGGCAACCGGCTGTAAATACGATATAGCGGTTAGACCTATCCAGAAGGAGGATG
184->AAATATTATTTCACTACACTAATAAGGACCCATGATTGACGACGACACTGCCACCGTTAAGTCATGGTACAGCCGACAGGTTAACGTTCTACTTATTGGTACGTGTTAACGTCTAAGCAACTAGGTATTCGAGTAGACTTGTCCCCCGGGTT
184->GCTTGTTTCTCAGTCAGCGCTCAAAACTACGCAGTAGTCGTAGCTTTAAACGCGGGTGCCTAGCGTTGATCCAAATCTTTCCTTAGGCCTCTCAGGAGGAGCTTATAGGTCGCATTCATTTCGTCCTCTACACGAGGTCGCGCATTTCTCTA
185->ATTCTTATACCCGACCGTGCTAGAATCAGTTAAGAATACTCTCGGCGTATAATGTTCATAATAACTATTAATGTCTCAAAAAACATATGAATTGCTCCATTGGGGTACAGTGCGCTAATTTGAGGATAGTGTGAGAGCAACTTGCGCGCGCG
185->GGCCACATTTGCGGACTATGCAGGTTGTACGTAAGATCCTTTTACAACAGGGTAGAACTTCTTCCCTTGGTTATAAGGGGAGCTCAAGCATGGATCTAGCTGGTTTGTTTGGGAGTAAGCTTAGTAATGATCTGATCGCTATTTAGAGTTAC
186->GGGAACTATCACTGAGCCGACCGCGAAAGTGGACATGTCATGCGTTGCTACGAGATTTGACTGACTATAAGTCGACCGTCGCGCCACCCAAAAGACAAATCAGCTGCCAGACCCTTCCTCCACTTAGACCCAGACTTTGCGCCACCGCACCA
186->AAAGTGATGCCCTATAATGTGCAATCACACCATGATAAAAGACGGGTGATACCCAGTCTCCGCCTTCGTGCACTGATGACATTAGCTCCAAGGGCTCCCGAGCCTTCGCGGTTACTACGCCTCAAAAGTAGGCAAGAGGAATTCATGACCGG
187->TCCCCTCGATTGAGTGTAACGGAGGTGAAGGCAAGGGCGTGTTTCTAGGCATAGTGGGTTCCTTTCCATCTGACGCCGGCTTACGCACCCTACGGGTTTTACTTTACAGTTACCCCGGGACGATATTGTCCGTGATAACAGCGGCGCAATGA
187->TTTTGCTGATACTTGGACGCTCACTCAGGACAGGCTGAGGGGAGAGTACGGCATAAGTTTCGGAGTAGTCTAGTAGATGCATTACTCAAATCCTGGCGTGCTAACATGAATGGAATGACCGGCCCATCTTACCGCCCAAGTGACGGGATGTG
188->AATTGGTCACCCAACACTCTAGGCGTGCGTATGGTAACGGTCCAACCCCCCTATCCTCTATGCTTCGAAGACATAATAACCGATCCTTTGGACGCACAGATGATCGTGCTGGACCCGTAAACTCTCGTCGTGCGGCCTCACGGCTCGTTGTA
188->CATTCCACCGCTTATCTATCAGCCGACAGGTCCTACGCAGGTCGTTAGCCTCATTTAAGACTACGTCACTGACTCGCGGTGCATAGTATACTATCGTTCCAACTGGTCCGTATAATCAGTCAAAAACAACCGTCCGGCGAGAGGACGGGAGC
189->GCACTCGCGTGCACCTCCGGTCAGCCATACATCTCAGAGAGGGGAACGAGTAAAGTGCAATCAGACTTATACTTCGTTGGCCTCGGTTTCGGTTGTTTAGCGTAATCCATCTGCAACTTCACTACCCGTCTCGGGATAAAACTACATAATGC
189->ACCATTCACGGGAACCACATATTCTTGTTATCCTTCTTTAGAACAGGAGATCTGATTACCTTGCCTTTGAACCGCCCTCGCTGCGTTGGAATACCGAGCGCAAGAAGGTTGATGTAACAGAACCCGTCGGCCGGTGTCAGTTACACTTAATG
190->TGGCTTTGCTAAGTACCAAACTCTCGAACGGGAGCCAACTTGTATGGCCAGCCACGTGTATGGACCTTGATAGAAACACGATGGGCAAGTATTCGGAGGAGTACCAAATGGCGGGGGACATATGGTACATCGACCGCTAAGCCCGCTGATAC
190->TATATGCCGCTAAGACGCACAGCAATTCACCTCAATTGGGAAGCGCCGGAGCCTCCAACCGAAGCTAGCTCAATCATGGCAGCTGTCCCCGCCATAGGTAAGCGGTGTTCTACTTCTGTTTTTTGGCTACGTAAACATGCCGCCAGAACCGG
191->GGCATAGGGCTCGGTTGTGTTTCGGGAGACTCAAATAGTTTAACGGTTCAGGTGGCCGACTTAAACGTATCATGGTATGGCCCTACACGAATCAAAAAGCCCCGGTGAAGACTCCACCGACACGAACCTGGATGAGAGCTTATACACAGGAC
191->TTTAAATTGGTAACTGACCTATAGCCGAACCTGTTGTTCCATAGTGTCAAGCATTGTAGTTTAACGGGAGGGGAAATTTCGAGTCACAGGGCGGGAGGAAAATTGTGGGCCCAAATCGAATACTTCTTTGCGAAATGATATTACTCTGGATC
192->135
192->133
193->156
193->188
194->140
194->187
195->168
195->155
196->153
196->134
197->183
197->170
198->145
198->184
199->154
199->138
200->166
200->139
201->165
201->176
202->150
202->181
203->163
203->169
204->186
204->162
205->148
205->172
206->190
206->191
207->157
207->167
208->174
208->179
209->182
209->147
210->171
210->146
211->164
211->158
212->185
212->131
213->189
213->136
214->129
214->137
215->141
215->173
216->143
216->161
217->144
217->177
218->178
218->152
219->175
219->151
220->142
220->160
221->128
221->180
222->130
222->132
223->149
223->159
224->200
224->204
225->197
225->219
226->216
226->208
227->203
227->192
228->193
228->199
229->209
229->205
230->223
230->206
231->217
231->202
232->222
232->214
233->201
233->207
234->196
234->221
235->195
235->220
236->210
236->218
237->215
237->212
238->194
238->213
239->211
239->198
240->239
240->236
241->235
241->228
242->229
242->237
243->224
243->230
244->238
244->232
245->225
245->233
246->231
246->226
247->234
247->227
248->242
248->247
249->243
249->240
250->244
250->241
251->245
251->246
252->250
252->251
253->249
253->248
254->253
254->252
''')